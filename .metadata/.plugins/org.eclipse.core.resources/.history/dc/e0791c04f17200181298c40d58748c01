package hitchhike;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;

public class RouteDAO extends DAO<Route>{

	public ArrayList<Route> findAll(){
		ArrayList<Route> routes=new ArrayList<Route>();
		try {
			Connection con = this.getConnection();
			Statement stmt = con.createStatement();

			ResultSet rs = stmt.executeQuery("select * from Routes;");

			while(rs.next()){
				routes.add(new Route(rs.getInt(1), rs.getString(2), rs.getString(3), rs.getDouble(4), rs.getDouble(5), rs.getString(6), rs.getDouble(7), rs.getDouble(8), rs.getString(9), rs.getInt(10), rs.getString(11), rs.getInt(12), rs.getInt(13)));
			}
			con.close();
		} catch (Exception e) {
			e.printStackTrace();
		}
		return routes;
	}
	
	public ArrayList<Route> findAllWaiting(){
		ArrayList<Route> routes=new ArrayList<Route>();
		try {
			Connection con = this.getConnection();
			Statement stmt = con.createStatement();

			ResultSet rs = stmt.executeQuery("select * from Routes where rno not in (select rno from Validations where accepted != 2);");

			while(rs.next()){
				routes.add(new Route(rs.getInt(1), rs.getString(2), rs.getString(3), rs.getDouble(4), rs.getDouble(5), rs.getString(6), rs.getDouble(7), rs.getDouble(8), rs.getString(9), rs.getInt(10), rs.getString(11), rs.getInt(12), rs.getInt(13)));
			}
			con.close();
		} catch (Exception e) {
			e.printStackTrace();
		}
		return routes;
	}

	public Route findByLogin(String login) {
		Route r;
		try {
			Connection con = this.getConnection();
			Statement stmt = con.createStatement();

			ResultSet rs = stmt.executeQuery("select * from Routes where login = '"+login+"';");
			if(rs.next()){
				r=new Route(rs.getInt(1), rs.getString(2), rs.getString(3), rs.getDouble(4), rs.getDouble(5), rs.getString(6), rs.getDouble(7), rs.getDouble(8), rs.getString(9), rs.getInt(10), rs.getString(11), rs.getInt(12), rs.getInt(13));
				con.close();
				return r;
			}else {
				con.close();
				return null;
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return null;
	}
	
	public Route findByRno(int rno) {
		Route r;
		try {
			Connection con = this.getConnection();
			Statement stmt = con.createStatement();

			ResultSet rs = stmt.executeQuery("select * from Routes where rno = "+rno+";");
			if(rs.next()){
				r=new Route(rs.getInt(1), rs.getString(2), rs.getString(3), rs.getDouble(4), rs.getDouble(5), rs.getString(6), rs.getDouble(7), rs.getDouble(8), rs.getString(9), rs.getInt(10), rs.getString(11), rs.getInt(12), rs.getInt(13));
				con.close();
				return r;
			}else {
				con.close();
				return null;
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return null;
	}
	
	public ArrayList<Route> findBetweenCoord(double xMin, double xMax, double yMin, double yMax){
		ArrayList<Route> routes=new ArrayList<Route>();
		try {
			Connection con = this.getConnection();
			Statement stmt = con.createStatement();
			ResultSet rs = stmt.executeQuery("select * from Routes where coordXOrigin between "+xMin+" and "+xMax+" and coordYOrigin between "+yMin+" and "+yMax+";");

			while(rs.next()){
				routes.add(new Route(rs.getInt(1), rs.getString(2), rs.getString(3), rs.getDouble(4), rs.getDouble(5), rs.getString(6), rs.getDouble(7), rs.getDouble(8), rs.getString(9), rs.getInt(10), rs.getString(11), rs.getInt(12), rs.getInt(13)));
			}
			con.close();
		} catch (Exception e) {
			e.printStackTrace();
		}
		return routes;
	}
	
	public ArrayList<Route> findWaitingBetweenCoord(double xMin, double xMax, double yMin, double yMax){
		ArrayList<Route> routes=new ArrayList<Route>();
		try {
			Connection con = this.getConnection();
			Statement stmt = con.createStatement();
			ResultSet rs = stmt.executeQuery("select * from Routes where coordXOrigin between "+xMin+" and "+xMax+" and coordYOrigin between "+yMin+" and "+yMax+" and rno not in (select rno from Validations where accepted !=1);");

			while(rs.next()){
				routes.add(new Route(rs.getInt(1), rs.getString(2), rs.getString(3), rs.getDouble(4), rs.getDouble(5), rs.getString(6), rs.getDouble(7), rs.getDouble(8), rs.getString(9), rs.getInt(10), rs.getString(11), rs.getInt(12), rs.getInt(13)));
			}
			con.close();
		} catch (Exception e) {
			e.printStackTrace();
		}
		return routes;
	}

	public boolean addRoute(Route r) {
		try {
			Connection con = this.getConnection();
			Statement stmt = con.createStatement();

			int i = stmt.executeUpdate("insert into Routes ("
					+ "login, "
					+ "origin, "
					+ "coordXOrigin, "
					+ "coordYOrigin, "
					+ "destination, "
					+ "coordXDest, "
					+ "coordYDest, "
					+ "dureeTxt, "
					+ "dureeSec, "
					+ "distanceTxt, "
					+ "distanceM, "
					+ "nbrPers) "
					+ "values ('"+
					r.getLogin()+"', '"+
					r.getAdresseOrigin()+"', '"+
					r.getCoordXOrigin()+"', '"+
					r.getCoordYOrigin()+"', '"+
					r.getAdresseDestination()+"', '"+
					r.getCoordXDest()+"', '"+
					r.getCoordYDest()+"', '"+
					r.getDureeTxt()+"', '"+
					r.getDureeSec()+"', '"+
					r.getDistanceTxt()+"', '"+
					r.getDistanceMetre()+"', '"+
					r.getNbrPers()+"');");
			if(i>0) {                
				System.out.println("Inserted Successfully"); 
				con.close();
				return true;            
			}else {                
				System.out.println("Insert Unsuccessful");
				con.close();
				return false;
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return false;
	}

	public boolean exist(String login) {
		return findByLogin(login)!=null;
	}

	public int size() {
		return findAll().size();
	}
}
